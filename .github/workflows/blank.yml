# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  pull_request:
    branches: [ 'develop' ]
    types: ['closed']

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  get-epic-branches:
    runs-on: ubuntu-latest
    outputs:
      branch_list: ${{ steps.get-epic.outputs.epic_list }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Get epic branches
        id: get-epic
        run: |
          git fetch --all
          echo $(git branch -r --list origin/epic/*)
          echo "epic_list==$(git branch -r --list origin/epic/*)" >> $GITHUB_ENV
  # This workflow contains a single job called "build"
  auto-merge:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    needs: get-epic-branches
    strategy:
      fail-fast: false
      matrix:
        value: ${{ needs.get-branch-list.outputs.branch_list }}
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Runs a set of commands using the runners shell
      - name: merge epic branch
        run: |
          echo "${{ matrix.value }}" 
          for branch in env.EpicBranches
          do
            git checkout $branch
            git merge origin develop
            echo "CONFLICTS_NUM=$(git ls-files --unmerged | cut --fields=2 | sort --unique | wc -l)" >> $GITHUB_ENV
          done
